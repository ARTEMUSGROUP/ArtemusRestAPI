status = warn
name= properties_configuration
# Give directory path where log files should get stored
# property.basePath = P:/GLS_WorkSpace/Apache_Tomcat_Versions/apache-tomcat-7.0.42/webapps/logs/artemus-logs
property.basePath = C:/Program Files/apache-tomcat-6.0.32/bin/RestApiArtemus-logs
# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
# Specify the pattern of the logs
appender.console.layout.pattern = %level %d{DATE} [%l] - %msg%ex%n
# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName=${basePath}/rest-api.log
#appender.rolling.fileName=${basePath}/smartpro-prod.log

#appender.rolling.fileName=${catalina.home}/kpi-logs/gls.log
appender.rolling.filePattern=${basePath}app_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %level %d{DATE} [%l] - %msg%ex%n
appender.rolling.policies.type = Policies

# Rotate log file each day
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy

#appender.rolling.strategy.delete.type = Delete
#appender.rolling.strategy.delete.basePath = ${basePath}
#appender.rolling.strategy.delete.maxDepth = 1
#appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
## Delete files older than 7 days
#appender.rolling.strategy.delete.ifLastModified.age = 7d

#appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
#appender.rolling.policies.size.size=10kb
#appender.rolling.strategy.type = DefaultRolloverStrategy
#appender.rolling.strategy.max = 3

# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging
#logging levels: all < trace < debug < info < warn < error < fatal  
#logger.example.name = action.LoginAction
#logger.example.level = ALL 
#logger.example.additivity = false
#logger.example.appenderRef.rolling.ref = fileLogger
#logger.example.appenderRef.console.ref = consoleLogger

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = ALL
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger